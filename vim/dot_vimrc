"##表示設定#####
set number "行番号を表示する
set title "編集中のファイル名を表示
set showmatch "括弧入力時の対応する括弧を表示
syntax on "コードの色分け
set tabstop=2 "インデントをスペース4つ分に設定
set expandtab
set shiftwidth=2
"オートインデント
set smartindent 
let g:unite_enable_start_insert=0
"スワップファイル使わない
set noswapfile
" カーソルが何行目の何列目に置かれているかを表示する
set ruler
"エディタウィンドウの末尾から2行目にステータスラインを常時表示させる
set laststatus=2
"現在のGitブランチ
set statusline+=%{fugitive#statusline()}
"ファイルパス
set title
"コマンドラインでTabによるファイル名変換
set wildmenu
"入力中のコマンド
set showcmd
" deleteの有効か
set backspace=indent,eol,start
"vi互換をオフする
set nocompatible
"小文字検索で大文字検索
set smartcase
" 検索結果をハイライト表示する
set hlsearch
"多分を空白文字に
set expandtab
" 検索ワードの最初の文字を入力した時点で検索を開始する
set incsearch
" タブと行の続きを可視化する
set listchars=tab:>\ ,extends:<
" 対応する括弧やブレースを表示する
set showmatch
" スワップファイル用のパス
set directory=$HOME/.vim/backup
"インクリメンタルサーチ
set incsearch
"かっこをいれたら対応するかっこを表示
set showmatch
"新しい行を作った時に高度な自動インデントを行う
set smarttab
" grep検索を設定する
set grepformat=%f:%l:%m,%f:%l%m,%f\ \ %l%m,%f
set grepprg=grep\ -nh
" vimのファイルタイプによる設定
filetype plugin indent on
" " 検索結果のハイライトをEsc連打でクリアする
nnoremap <ESC><ESC> :nohlsearch<CR>
" 全角スペースの表示
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=reverse ctermfg=DarkGray gui=reverse guifg=DarkGray
endfunction
if has('syntax')
    augroup ZenkakuSpace
        autocmd!
        "ZenkakuSpace をカラーファイルで設定するなら、
        "次の行をコメントアウト
        autocmd ColorScheme       * call ZenkakuSpace()
        autocmd VimEnter,WinEnter * match ZenkakuSpace /　/
    augroup END
    call ZenkakuSpace()
endif


" スペース + oで新しいファイル
nnoremap <Leader>o :CtrlP<CR>
" スペース + wで新しいファイル
nnoremap <Leader>w :w<CR>
" スペース + pとyでコピーペースト
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

"カーソルを表示行で移動する。物理行移動は<C-n>,<C-p>
nnoremap j gj
nnoremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk
" カーソル移動をキーボードで
"map <Up> <Nop>
"map <Down> <Nop>
"map <Left> <Nop>
"map <Right> <Nop>
"inoremap <Up> <Nop>
"inoremap <Down> <Nop>
"inoremap <Left> <Nop>
"inoremap <Right> <Nop>

" 行頭行末への移動
:map! <C-e> <Esc>$a
:map! <C-a> <Esc>^a
:map <C-e> <Esc>$a
:map <C-a> <Esc>^a

"インサートモード中のカーソル関連
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
" 日本語設定
"日本語の行の連結時には空白を入力しない。
set formatoptions+=mM
"□や○の文字があってもカーソル位置がずれないようにする。
set ambiwidth=double
"画面最後の行をできる限り表示する。
set display+=lastline
" ファイルエンコーディングの表示
set laststatus=2
set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=\ (%v,%l)/%L%8P\ 
" Vundleを使うのに必要な設定
set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
call vundle#end()            " required
filetype plugin indent on    " required
map <C-i> :PluginInstall<CR>
" Vundleを使うのにインストールするモジュールリスト
Plugin 'gmarik/Vundle.vim'
Plugin 'terryma/vim-expand-region'
Plugin 'tpope/vim-fugitive'
Plugin 'L9'
"Plugin 'git://git.wincent.com/command-t.git'
" プラグインのインストール
Plugin 'fuenor/JpFormat.vim'
" Ruby / Rails関連
Plugin 'alpaca-tc/alpaca_tags'
Plugin 'tpope/vim-rails.git'
Plugin 'AndrewRadev/switch.vim'
Plugin 'Shougo/neosnippet'
Plugin 'tpope/vim-endwise'
Plugin 'Shougo/unite.vim'
Plugin 'basyura/unite-rails'
Plugin 'thinca/vim-ref'
Plugin 'yuku-t/vim-ref-ri'
" その他Web関連
Plugin 'kchmck/vim-coffee-script'
Plugin 'JulesWang/css.vim' 
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'tpope/vim-haml'
Plugin 'pangloss/vim-javascript'
Plugin 'Shougo/vimfiler.vim'
" 日本語関連の設定
set runtimepath +=$HOME/.vim/bundle/JpFormat.vim
set formatexpr=jpfmt#formatexpr()
let jpfmt_paragraph_regexp = '^[　「]'
" 原稿枚数カウント
nnoremap <silent> g,rc :JpCountPages!<CR>
map <C-f> :JpFormatAll<CR>
map <C-c> :JpCountPages 20 20<CR>
" 外部ビューアを起動する
nnoremap <silent> <F8> :JpExtViewer<CR>
au BufRead,BufNewFile  *.txt let JpFormatCursorMovedI = 1
" txtファイルで「連結マーカー+改行」が有ったら自動整形を有効にする
au BufRead,BufNewFile  *.txt  silent! call 
" 原稿文字数(全角の折り返し文字数)
au BufRead,BufNewFile *.txt let JpCountChars = 40
" 原稿行数
au BufRead,BufNewFile *.txt let JpCountLines = 17
" 禁則処理の最大ぶら下がり字数(-1なら全てぶら下げ)
au BufRead,BufNewFile *.txt let JpCountOverChars = 1

" そのたキーバインド
map <esc>p :set paste<CR>
map <esc>n :set nopaste<CR>
nnoremap [unite]    <Nop>
nmap <C-u> :Unite 

" 画面分割
map <C-w>v :vs<CR>
map <C-w>s :sp<CR>

"終了、保存周り
map <C-q>w :wq!<CR>
map <C-q> :q<CR>

" Rails関連設定
"------------------------------------
" Alpaca
"------------------------------------
augroup AlpacaTags
  autocmd!
  if exists(':Tags')
    autocmd BufWritePost Gemfile TagsBundle
    autocmd BufEnter * TagsSet
    " 毎回保存と同時更新する場合はコメントを外す
    " autocmd BufWritePost * TagsUpdate
  endif
augroup END
"------------------------------------
" neosnippet
"------------------------------------
"" neosnippet "{{{
 
" snippetを保存するディレクトリを設定してください
" " example
" " let s:default_snippet = neobundle#get_neobundle_dir() .
" '/neosnippet/autoload/neosnippet/snippets' " 本体に入っているsnippet
" " let s:my_snippet = '~/snippet' " 自分のsnippet
" " let g:neosnippet#snippets_directory = s:my_snippet
" " let g:neosnippet#snippets_directory = s:default_snippet . ',' .
" s:my_snippet
imap <silent><C-F>                <Plug>(neosnippet_expand_or_jump)
inoremap <silent><C-U>            <ESC>:<C-U>Unite snippet<CR>
nnoremap <silent><Space>e         :<C-U>NeoSnippetEdit -split<CR>
smap <silent><C-F>                <Plug>(neosnippet_expand_or_jump)
" " xmap <silent>o
" <Plug>(neosnippet_register_oneshot_snippet)
" "}}}

"-----------------------------------
" switch vim
"-----------------------------------
function! s:separate_defenition_to_each_filetypes(ft_dictionary) "{{{
  let result = {}
 
  for [filetypes, value] in items(a:ft_dictionary)
    for ft in split(filetypes, ",")
      if !has_key(result, ft)
        let result[ft] = []
      endif
 
      call extend(result[ft], copy(value))
    endfor
  endfor
 
  return result
endfunction"}}}
 
" ------------------------------------
" switch.vim
" ------------------------------------
nnoremap ! :Switch<CR>
let s:switch_definition = {
      \ '*': [
      \   ['is', 'are']
      \ ],
      \ 'ruby,eruby,haml' : [
      \   ['if', 'unless'],
      \   ['while', 'until'],
      \   ['.blank?', '.present?'],
      \   ['include', 'extend'],
      \   ['class', 'module'],
      \   ['.inject', '.delete_if'],
      \   ['.map', '.map!'],
      \   ['attr_accessor', 'attr_reader', 'attr_writer'],
      \ ],
      \ 'Gemfile,Berksfile' : [
      \   ['=', '<', '<=', '>', '>=', '~>'],
      \ ],
      \ 'ruby.application_template' : [
      \   ['yes?', 'no?'],
      \   ['lib', 'initializer', 'file', 'vendor', 'rakefile'],
      \   ['controller', 'model', 'view', 'migration', 'scaffold'],
      \ ],
      \ 'erb,html,php' : [
      \   { '<!--\([a-zA-Z0-9 /]\+\)--></\(div\|ul\|li\|a\)>' : '</\2><!--\1-->' },
      \ ],
      \ 'rails' : [
      \   [100, ':continue', ':information'],
      \   [101, ':switching_protocols'],
      \   [102, ':processing'],
      \   [200, ':ok', ':success'],
      \   [201, ':created'],
      \   [202, ':accepted'],
      \   [203, ':non_authoritative_information'],
      \   [204, ':no_content'],
      \   [205, ':reset_content'],
      \   [206, ':partial_content'],
      \   [207, ':multi_status'],
      \   [208, ':already_reported'],
      \   [226, ':im_used'],
      \   [300, ':multiple_choices'],
      \   [301, ':moved_permanently'],
      \   [302, ':found'],
      \   [303, ':see_other'],
      \   [304, ':not_modified'],
      \   [305, ':use_proxy'],
      \   [306, ':reserved'],
      \   [307, ':temporary_redirect'],
      \   [308, ':permanent_redirect'],
      \   [400, ':bad_request'],
      \   [401, ':unauthorized'],
      \   [402, ':payment_required'],
      \   [403, ':forbidden'],
      \   [404, ':not_found'],
      \   [405, ':method_not_allowed'],
      \   [406, ':not_acceptable'],
      \   [407, ':proxy_authentication_required'],
      \   [408, ':request_timeout'],
      \   [409, ':conflict'],
      \   [410, ':gone'],
      \   [411, ':length_required'],
      \   [412, ':precondition_failed'],
      \   [413, ':request_entity_too_large'],
      \   [414, ':request_uri_too_long'],
      \   [415, ':unsupported_media_type'],
      \   [416, ':requested_range_not_satisfiable'],
      \   [417, ':expectation_failed'],
      \   [422, ':unprocessable_entity'],
      \   [423, ':precondition_required'],
      \   [424, ':too_many_requests'],
      \   [426, ':request_header_fields_too_large'],
      \   [500, ':internal_server_error'],
      \   [501, ':not_implemented'],
      \   [502, ':bad_gateway'],
      \   [503, ':service_unavailable'],
      \   [504, ':gateway_timeout'],
      \   [505, ':http_version_not_supported'],
      \   [506, ':variant_also_negotiates'],
      \   [507, ':insufficient_storage'],
      \   [508, ':loop_detected'],
      \   [510, ':not_extended'],
      \   [511, ':network_authentication_required'],
      \ ],
      \ 'rspec': [
      \   ['describe', 'context', 'specific', 'example'],
      \   ['before', 'after'],
      \   ['be_true', 'be_false'],
      \   ['get', 'post', 'put', 'delete'],
      \   ['==', 'eql', 'equal'],
      \   { '\.should_not': '\.should' },
      \   ['\.to_not', '\.to'],
      \   { '\([^. ]\+\)\.should\(_not\|\)': 'expect(\1)\.to\2' },
      \   { 'expect(\([^. ]\+\))\.to\(_not\|\)': '\1.should\2' },
      \ ],
      \ 'markdown' : [
      \   ['[ ]', '[x]']
      \ ]
      \ }
 
let s:switch_definition = s:separate_defenition_to_each_filetypes(s:switch_definition)
function! s:define_switch_mappings() "{{{
  if exists('b:switch_custom_definitions')
    unlet b:switch_custom_definitions
  endif
 
  let dictionary = []
  for filetype in split(&ft, '\.')
    if has_key(s:switch_definition, filetype)
      let dictionary = extend(dictionary, s:switch_definition[filetype])
    endif
  endfor
 
  if exists('b:rails_root')
    let dictionary = extend(dictionary, s:switch_definition['rails'])
  endif
 
  if has_key(s:switch_definition, '*')
    let dictionary = extend(dictionary, s:switch_definition['*'])
  endif
 
  "if !empty('dictionary')
   " call alpaca#let_b:('switch_custom_definitions', dictionary)
  "endif
endfunction"}}}
 
augroup SwitchSetting
  autocmd!
  autocmd Filetype * if !empty(split(&ft, '\.')) | call <SID>define_switch_mappings() | endif
augroup END


"------------------------------------
" Unite-rails.vim
"------------------------------------
"{{{
function! UniteRailsSetting()
  nnoremap <buffer><C-u><C-v>  :<C-U>Unite rails/view<CR>
  nnoremap <buffer><C-u><C-m>       :<C-U>Unite rails/model<CR>
  nnoremap <buffer><C-u><C-c>            :<C-U>Unite rails/controller<CR>
 
  nnoremap <buffer><C-H>c           :<C-U>Unite rails/config<CR>
  nnoremap <buffer><C-H>s           :<C-U>Unite rails/spec<CR>
  nnoremap <buffer><C-H>m           :<C-U>Unite rails/db -input=migrate<CR>
  nnoremap <buffer><C-H>l           :<C-U>Unite rails/lib<CR>
  nnoremap <buffer><expr><C-H>g     ':e '.b:rails_root.'/Gemfile<CR>'
  nnoremap <buffer><expr><C-H>r     ':e '.b:rails_root.'/config/routes.rb<CR>'
  nnoremap <buffer><expr><C-H>se    ':e '.b:rails_root.'/db/seeds.rb<CR>'
  nnoremap <buffer><C-H>ra          :<C-U>Unite rails/rake<CR>
  nnoremap <buffer><C-H>h           :<C-U>Unite rails/heroku<CR>
endfunction
aug MyAutoCmd
  au User Rails call UniteRailsSetting()
aug END
"}}}
"------------------------------------
" endwise.vim
"------------------------------------
"{{{
let g:endwise_no_mappings=1
"}}}

 
"------------------------------------
" CSS周りの設定
"------------------------------------
au BufRead,BufNewFile *.scss set filetype=scss.css


""""""""""""""""""""""""""""""
" 最後のカーソル位置を復元する
""""""""""""""""""""""""""""""
if has("autocmd")
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
endif
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" 自動的に閉じ括弧を入力
""""""""""""""""""""""""""""""
imap { {}<LEFT>
imap [ []<LEFT>
imap ( ()<LEFT>
"imap 「「」<LEFT>
""""""""""""""""""""""""""""""

" 行頭から前行の行末への移動
set whichwrap=b,s,h,l,<,>,[,]
