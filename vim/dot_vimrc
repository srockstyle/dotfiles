set background=dark
colorscheme hybrid
set number "行番号を表示する
set cursorline "カーソル行のハイライト
set title "編集中のファイル名を表示
set showmatch "括弧入力時の対応する括弧を表示
syntax on "コードの色分け
set shell=/usr/local/bin/zsh
set tabstop=2
set autoindent
set expandtab
set shiftwidth=2
"オートインデント
" 保存時に行末の空白を除去する
autocmd BufWritePre * :%s/\s\+$//ge
set smartindent
"スワップファイル使わない
set noswapfile
" カーソルが何行目の何列目に置かれているかを表示する
set ruler
"エディタウィンドウの末尾から2行目にステータスラインを常時表示させる
"現在のGitブランチ
set statusline+=%{fugitive#statusline()}
"ファイルパス
set title
"コマンドラインでTabによるファイル名変換
set wildmenu
"コマンド履歴
set history=500
"入力中のコマンド
set showcmd
" deleteの有効か
set backspace=indent,eol,start
"vi互換をオフする
" set nocompatible
"小文字検索で大文字検索
set smartcase
" 検索結果をハイライト表示する
set hlsearch
"多分を空白文字に
" set expandtab
" インクリメンタルサーチ. １文字入力毎に検索を行う
set incsearch
" 検索パターンに大文字小文字を区別しない
set ignorecase
" 検索パターンに大文字を含んでいたら大文字小文字を区別する
set smartcase
" 検索結果をハイライト
set hlsearch
" タブと行の続きを可視化する
" set listchars=tab:>\ ,extends:<
" 対応する括弧やブレースを表示する
set showmatch
" スワップファイル用のパス
set directory=$HOME/.vim/backup
" %で対応するかっこへ移動
source $VIMRUNTIME/macros/matchit.vim
"インクリメンタルサーチ
set incsearch
"かっこをいれたら対応するかっこを表示
set showmatch
"補完ポップアップの高さ
set pumheight=20

"新しい行を作った時に高度な自動インデントを行う
" set smarttab
" grep検索を設定する
set grepformat=%f:%l:%m,%f:%l%m,%f\ \ %l%m,%f
set grepprg=grep\ -nh

inoremap <C-e> <Esc>$a
inoremap <C-a> <Esc>^a
noremap <C-e> <Esc>$a
noremap <C-a> <Esc>^a

map <C-T> :table

" 貼り付けやっても自動インデントされない
" set pasteやらなくてもよくなった！
if &term =~ "xterm"
    let &t_SI .= "\e[?2004h"
    let &t_EI .= "\e[?2004l"
    let &pastetoggle = "\e[201~"

    function! XTermPasteBegin(ret)
        set paste
        return a:ret
    endfunction

    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
endif


" call pathogen#infect()

syntax enable
filetype plugin indent on


" vimのファイルタイプによる設定
filetype plugin indent on
" " 検索結果のハイライトをEsc連打でクリアする
nnoremap <ESC><ESC> :nohlsearch<CR>

" スペース + pとyでコピーペースト
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P


"カーソルを表示行で移動する。物理行移動は<C-n>,<C-p>
nnoremap j gj
noremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk
" カーソル移動をキーボードで
" 矢印キー禁止令 ごめんなさい無理でした
" map <Up> <Nop>
" map <Down> <Nop>
" map <Left> <Nop>
" map <Right> <Nop>
" inoremap <Up> <Nop>
" inoremap <Down> <Nop>
" inoremap <Left> <Nop>
" inoremap <Right> <Nop>

"
"日本語の行の連結時には空白を入力しない。
set formatoptions+=mM
"□や○の文字があってもカーソル位置がずれないようにする。
set ambiwidth=double
"画面最後の行をできる限り表示する。
set display+=lastline
" ファイルエンコーディングの表示
set laststatus=2
set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=\ (%v,%l)/%L%8P\


" プラグイン管理（dein）
" プラグインが実際にインストールされるディレクトリ
let s:dein_dir = expand('~/.vim/dein')
" dein.vim 本体
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vim がなければ github から落としてくる
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

" 設定開始
"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('~/.cache/dein')
  call dein#begin('~/.cache/dein')

  " Let dein manage dein
  " Required:
  call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')

  " Add or remove your plugins here like this:
  "call dein#add('davidhalter/jedi-vim')

  let g:rc_dir    = expand('~/.vim/rc')
  let s:toml      = g:rc_dir . '/dein.toml'
  " " TOML を読み込み、キャッシュしておく
  " call dein#load_toml(s:toml,      {'lazy': 0})
  " call dein#load_toml(s:dein_dir . '/lazy.toml', {'lazy': 1})


  let g:config_dir  = expand('~/.vim/dein/userconfig')
  let s:toml        = g:config_dir . '/plugins.toml'
  " let s:lazy_toml   = g:config_dir . '/plugins_lazy.toml'

  " TOML 読み込み
  call dein#load_toml(s:toml,      {'lazy': 0})
  " call dein#load_toml(s:lazy_toml, {'lazy': 1})

  call dein#end()
  call dein#save_state()
endif


" Required:
filetype plugin indent on
syntax enable

" インストールされていないプラグインがあればインストールする
" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------


" プラグインインストールを使うのに必要な設定
"set nocompatible              " be iMproved, required
"filetype off                  " required
"set rtp+=~/.vim/bundle/Vundle.vim
"call vundle#begin()
"call vundle#end()            " required
"filetype plugin indent on    " required


" TODO ここはあとからtoml化する
" Plugin 'jiangmiao/simple-javascript-indenter'
" Plugin 'othree/javascript-libraries-syntax.vim'
" Plugin 'jelera/vim-javascript-syntax'
" Plugin 'pangloss/vim-javascript'
" Plugin 'ryym/vim-riot'
" Plugin 'nicklasos/vim-jsx-riot'
" Plugin 'JulesWang/css.vim'
" Plugitpope/vim-fugitiven 'cakebaker/scss-syntax.vim'
" Plugin 'hail2u/vim-css3-syntax'
" Python
" Plugin 'myvim/python.vim'



"------------------------------------
" タブ設定
"-----------------------------------

" マークダウン
" https://github.com/gabrielelana/vim-markdown
" Plugin 'plasticboy/vim-markdown'


""""""""""""""""""""""""""""""
" 画面分割
""""""""""""""""""""""""""""""
nnoremap sp :<C-u>sp<CR>
nnoremap vs :<C-u>vs<CR>

""""""""""""""""""""""""""""""
" 面分割間移動
""""""""""""""""""""""""""""""
nnoremap wj <C-w>j
nnoremap wk <C-w>k
nnoremap wl <C-w>l
nnoremap wh <C-w>h

"""""""""""""""""""""""""""""
" シェル使いたい
""""""""""""""""""""""""""""""
nnoremap ds :Deol<CR>

""""""""""""""""""""""""""""""
"終了、保存周り
""""""""""""""""""""""""""""""
nnoremap wq :<C-u>:wq!<CR>

""""""""""""""""""""""""""""""
" 最後のカーソル位置を復元する
""""""""""""""""""""""""""""""
if has("autocmd")
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
endif

""""""""""""""""""""""""""""""
" 自動的に閉じ括弧を入力
""""""""""""""""""""""""""""""
imap { {}<LEFT>
imap [ []<LEFT>
imap ( ()<LEFT>

""""""""""""""""""""""""""""""
" 行頭から前行の行末への移動
""""""""""""""""""""""""""""""
set whichwrap=b,s,h,l,<,>,[,]

""""""""""""""""""""""""""""""
" ツリー表示
""""""""""""""""""""""""""""""
" autocmd VimEnter * execute 'NERDTree'
nnoremap <C-t> :NERDTree<CR>
nnoremap nb :Bookmark<CR>

""""""""""""""""""""""""""""""
" 補完
""""""""""""""""""""""""""""""
" TODO 人類にまだdeopleteは早かった
" let g:deoplete#enable_at_startup = 1
" let g:deoplate#max_list = 10

" ただいまneocomplete
" Vim起動時にneocompleteを有効にする
let g:neocomplete#enable_at_startup = 1
" smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
let g:neocomplete#enable_smart_case = 1
" 3文字以上の単語に対して補完を有効にする
let g:neocomplete#min_keyword_length = 3
" 区切り文字まで補完する
let g:neocomplete#enable_auto_delimiter = 1

" Ruby
" solargraphをインストールすると使える
" $ gem install solargraph
let g:monster#completion#backend = 'solargraph'
" async completion
let g:monster#completion#rcodetools#backend = "async_rct_complete"
let g:neocomplete#sources#omni#input_patterns = {
  \   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
\}

let g:neosnippet#snippets_directory='~/.vim/dictionaries'
let s:neco_dicts_dir = '~/.vim/dictionaries'
if isdirectory(s:neco_dicts_dir)
  let g:neocomplete#sources#dictionary#dictionaries = {
  \   'javascript': s:neco_dicts_dir . '/jquery.dict',
  \ }
endif

""""""""""""""""""""""""""""""
" 構文エラーチェック
""""""""""""""""""""""""""""""
"----------------------------------------------------------
" Syntasticの設定
"----------------------------------------------------------
" 設定頑張れなかった
" 構文エラー行に「>>」を表示
"let g:syntastic_enable_signs = 1
" 他のVimプラグインと競合するのを防ぐ
"let g:syntastic_always_populate_loc_list = 1
" 構文エラーリストを非表示
"let g:syntastic_auto_loc_list = 0
" ファイルを開いた時に構文エラーチェックを実行する
"let g:syntastic_check_on_open = 1
" 「:wq」で終了する時も構文エラーチェックする
"let g:syntastic_check_on_wq = 1

" 保存時にエラーがあれば表示
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_ruby_checkers=['rubocop', 'mri']

""""""""""""""""""""""""""""""
"タグジャンプ
""""""""""""""""""""""""""""""
" タグファイル作成は以下のコマンドで
" $ ctags -R -f .tags
"
"タグファイル読み込み
set tags=.tags;$HOME

" @aratana_tamutomo
" https://qiita.com/aratana_tamutomo/items/59fb4c377863a385e032
function! s:execute_ctags() abort
  " 探すタグファイル名
  let tag_name = '.tags'
  " ディレクトリを遡り、タグファイルを探し、パス取得
  let tags_path = findfile(tag_name, '.;')
  " タグファイルパスが見つからなかった場合
  if tags_path ==# ''
    return
  endif

  " タグファイルのディレクトリパスを取得
  " `:p:h`の部分は、:h filename-modifiersで確認
  let tags_dirpath = fnamemodify(tags_path, ':p:h')
  " 見つかったタグファイルのディレクトリに移動して、ctagsをバックグラウンド実行（エラー出力破棄）
  execute 'silent !cd' tags_dirpath '&& ctags -R -f' tag_name '2> /dev/null &'
endfunction
" タグファイル作成
augroup ctags
  autocmd!
  autocmd BufWritePost * call s:execute_ctags()
augroup END

"キーマップ
nnoremap <C-g> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>

""""""""""""""""""""""""""""""
" denite
""""""""""""""""""""""""""""""
" denite
let g:denite_enable_start_insert=1
let g:denite_source_history_yank_enable =1
let g:denite_source_file_mru_limit = 200

" 基本操作
" nnoremap <C-t> :Denite buffer<CR>
" denite/insert モードのときは，UpDownで移動できるようにする
call denite#custom#map('insert', '<Down>', '<denite:move_to_next_line>')
call denite#custom#map('insert', '<Up>', '<denite:move_to_previous_line>')

"git
"deniteじゃないものもあるけどここにまとめる
nnoremap gl :Glog<CR>
nnoremap gd :Gdiff<CR>
nnoremap gb :Denite gitbranch<CR>
nnoremap gs :Denite gitstatus<CR>
nnoremap gadd :Gwrite<CR>
nnoremap gcommit :Gcommit<CR>

"Rails
nnoremap drc :<C-u>Denite file_rec:app/controllers/<CR><Space>
nnoremap drm :<C-u>Denite file_rec:app/models/ <CR><Space>
nnoremap drv :<C-u>Denite file_rec:app/views/ <CR><Space>
nnoremap drs :<C-u>Denite file_rec:app/assets/stylesheets/ <CR>
nnoremap drj :<C-u>Denite file_rec:app/assets/javascripts/ <CR>



""""""""""""""""""""""""""""""
" Rails
" Rails間を高速移動
""""""""""""""""""""""""""""""
" とりあえずrailsっぽかったらそっち系の
" autocmd BufEnter * if exists("b:rails_root") | NeoComplCacheSetFileType ruby.rails | endif
" autocmd BufEnter * if (expand("%") =~ "_spec\.rb$") || (expand("%") =~ "^spec.*\.rb$") | NeoComplCacheSetFileType ruby.rspec | endif
"
" スニペットなんだけど使えてるか微妙
autocmd User Rails.view*                 NeoSnippetSource ~/.vim/snippet/ruby.rails.view.snip
autocmd User Rails.controller*           NeoSnippetSource ~/.vim/snippet/ruby.rails.controller.snip
autocmd User Rails/db/migrate/*          NeoSnippetSource ~/.vim/snippet/ruby.rails.migrate.snip
autocmd User Rails/config/routes.rb      NeoSnippetSource ~/.vim/snippet/ruby.rails.route.snip



"------------------------------------
" vimrc自動再読み込み
"-----------------------------------
" autocmd  sourc $MYGVIMRC
" Set augroup.
augroup source-vimrc
  autocmd!
  autocmd BufWritePost *vimrc source $MYVIMRC | set foldmethod=marker
  autocmd BufWritePost *gvimrc if has('gui_running') source $MYGVIMRC
augroup END

"------------------------------------
" Coffee Scripts
"-----------------------------------
au BufRead,BufNewFile,BufReadPre *.coffee   set filetype=coffee
" インデント設定
autocmd FileType coffee    setlocal sw=2 sts=2 ts=2 et

"------------------------------------
" タブ設定
"-----------------------------------
map <Shift><Space> :table>

"------------------------------------
" python
"-----------------------------------
" autopep
" original http://stackoverflow.com/questions/12374200/using-uncrustify-with-vim/15513829#15513829
function! Preserve(command)
    " Save the last search.
    " Save the current cursor position.
    let cursor_position = getpos('.')
    " Save the current window position.
    normal! H
    let window_position = getpos('.')
    call setpos('.', cursor_position)
    " Execute the command.
    execute a:command
    " Restore the last search.
    let @/ = search
    " Restore the previous window position.
    call setpos('.', window_position)
    normal! zt
    " Restore the previous cursor position.
    call setpos('.', cursor_position)
endfunction

function! Autopep8()
    "--ignote=E501: 一行の長さの補正を無視"
    call Preserve(':silent %!autopep8 --ignore=E501 -')
endfunction

" " 保存時自動実行
" autocmd BufWrite *.{py} :call Autopep8()
"
" " 外部コマンドで現在のファイルを実行する
" autocmd BufNewFile,BufRead,BufEnter *.py nnoremap <C-e> :!python %

"-----------------------------------
" riot.js
"-----------------------------------
au BufNewFile,BufRead *.tag setlocal ft=html

"-----------------------------------
" statusline
"-----------------------------------
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['readonly', 'filename', 'modified', 'anzu']
  \   ]
  \ },
  \ 'component_function': {
  \   'anzu': 'anzu#search_status'
  \ }
  \ }


"-----------------------------------
" 検索強化
"-----------------------------------
" for vim-anzu
nmap n nzz<Plug>(anzu-update-search-status)
nmap N Nzz<Plug>(anzu-update-search-status)
nmap * <Plug>(anzu-star)
nmap # <Plug>(anzu-sharp)
nmap <silent> <ESC><ESC> :<C-u>nohlsearch<CR><Plug>(anzu-clear-search-status)

"-----------------------------------
" タブ設定
"-----------------------------------
augroup fileTypeIndent
    " 言語ごと
    autocmd!
    " Python
    autocmd BufNewFile,BufRead *.py setlocal tabstop=4 softtabstop=4 shiftwidth=4
    " PHP
    autocmd BufNewFile,BufRead *.php setlocal tabstop=4 softtabstop=4 shiftwidth=4
    " Ruby
    autocmd BufNewFile,BufRead *.rb setlocal tabstop=2 softtabstop=2 shiftwidth=2

    "フレームワークごとの設定
    " CakePHP
    autocmd BufNewFile,BufRead *.ctp setlocal tabstop=4 softtabstop=4 shiftwidth=4

augroup END

"-----------------------------------
" Ruby
"-----------------------------------

"-----------------------------------
" Golang
"-----------------------------------
"必要になったらやる
"http://tweeeety.hateblo.jp/entry/2017/01/16/232800

