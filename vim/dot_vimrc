set number "行番号を表示する
set title "編集中のファイル名を表示
set showmatch "括弧入力時の対応する括弧を表示
syntax on "コードの色分け
set tabstop=2 "インデントをスペース4つ分に設定
set expandtab
set shiftwidth=2
"オートインデント
" 保存時に行末の空白を除去する
 autocmd BufWritePre * :%s/\s\+$//ge
set smartindent
let g:unite_enable_start_insert=0
"スワップファイル使わない
set noswapfile
" カーソルが何行目の何列目に置かれているかを表示する
set ruler
"エディタウィンドウの末尾から2行目にステータスラインを常時表示させる
set laststatus=2
"現在のGitブランチ
set statusline+=%{fugitive#statusline()}
"ファイルパス
set title
"コマンドラインでTabによるファイル名変換
set wildmenu
"入力中のコマンド
set showcmd
" deleteの有効か
set backspace=indent,eol,start
"vi互換をオフする
" set nocompatible
"小文字検索で大文字検索
set smartcase
" 検索結果をハイライト表示する
set hlsearch
"多分を空白文字に
set expandtab
" 検索ワードの最初の文字を入力した時点で検索を開始する
set incsearch
" タブと行の続きを可視化する
set listchars=tab:>\ ,extends:<
" 対応する括弧やブレースを表示する
set showmatch
" スワップファイル用のパス
set directory=$HOME/.vim/backup
"インクリメンタルサーチ
set incsearch
"かっこをいれたら対応するかっこを表示
set showmatch
"新しい行を作った時に高度な自動インデントを行う
set smarttab
" grep検索を設定する
set grepformat=%f:%l:%m,%f:%l%m,%f\ \ %l%m,%f
set grepprg=grep\ -nh

" inoremap <C-e> <Esc>$a
inoremap <C-a> <Esc>^a
noremap <C-e> <Esc>$a
noremap <C-a> <Esc>^a

map <C-T> :table


" call pathogen#infect()

syntax enable
filetype plugin indent on


" vimのファイルタイプによる設定
filetype plugin indent on
" " 検索結果のハイライトをEsc連打でクリアする
nnoremap <ESC><ESC> :nohlsearch<CR>

" スペース + pとyでコピーペースト
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P


"カーソルを表示行で移動する。物理行移動は<C-n>,<C-p>
nnoremap j gj
noremap k gk
nnoremap <Down> gj
nnoremap <Up>   gk
" カーソル移動をキーボードで
" 矢印キー禁止令 ごめんなさい無理でした
" map <Up> <Nop>
" map <Down> <Nop>
" map <Left> <Nop>
" map <Right> <Nop>
" inoremap <Up> <Nop>
" inoremap <Down> <Nop>
" inoremap <Left> <Nop>
" inoremap <Right> <Nop>

"
"日本語の行の連結時には空白を入力しない。
set formatoptions+=mM
"□や○の文字があってもカーソル位置がずれないようにする。
set ambiwidth=double
"画面最後の行をできる限り表示する。
set display+=lastline
" ファイルエンコーディングの表示
set laststatus=2
set statusline=%<%f\ %m\ %r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=\ (%v,%l)/%L%8P\

" プラグインインストールを使うのに必要な設定
set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
call vundle#end()            " required
filetype plugin indent on    " required
" Vundleを使うのにインストールするモジュールリスト
Plugin 'gmarik/Vundle.vim'
Plugin 'terryma/vim-expand-region'
Plugin 'tpope/vim-fugitive'
Plugin 'L9'
Plugin 'scrooloose/nerdtree'
Plugin 'Shougo/vimshell'
Plugin 'Shougo/vimproc.vim'
" スタンダード
" unite

Plugin 'Shougo/unite.vim'
Plugin 'Shougo/neomru.vim'
Plugin 'basyura/unite-rails'

Plugin 'Shougo/neocomplcache'

" 日本語入力保管
Plugin 'fuenor/JpFormat.vim'
" スニペット
Plugin 'honza/vim-snippets'
" 外部ファイル全検索 / 今はまだいらないかな
" Plugin 'thinca/vim-qfreplace'
Plugin 'AndrewRadev/switch.vim'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'tpope/vim-endwise'
Plugin 'kchmck/vim-coffee-script'
Plugin 'thinca/vim-ref'



"JS / 面倒なのでここはあとから
Plugin 'jiangmiao/simple-javascript-indenter'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'ryym/vim-riot'
Plugin 'nicklasos/vim-jsx-riot'
" Ruby / Rails関連
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rails.git'
Plugin 'yuku-t/vim-ref-ri'
" Rubyの補完
" Plugin 'NigoroJr/rsense'

" CSS
Plugin 'JulesWang/css.vim'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'hail2u/vim-css3-syntax'

" Python
" Plugin 'myvim/python.vim'

" その他Web関連
Plugin 'Shougo/vimfiler.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'scrooloose/syntastic'
Plugin 'slim-template/vim-slim'
"------------------------------------
" タブ設定
"-----------------------------------

" マークダウン
" https://github.com/gabrielelana/vim-markdown
Plugin 'plasticboy/vim-markdown'

Plugin 'Shougo/neocomplcache-rsense.vim', {
    \ 'autoload' : { 'insert' : 0, 'filetype' : 'ruby', } }


""""""""""""""""""""""""""""""
" 画面分割
""""""""""""""""""""""""""""""
nnoremap sp :<C-u>sp<CR>
nnoremap vs :<C-u>vs<CR>

""""""""""""""""""""""""""""""
" 面分割間移動
""""""""""""""""""""""""""""""
nnoremap wj <C-w>j
nnoremap wk <C-w>k
nnoremap wl <C-w>l
nnoremap wh <C-w>h

"""""""""""""""""""""""""""""
" ODO タブ関連の処理 / 必要になるまでやらない"
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
"終了、保存周り
""""""""""""""""""""""""""""""
nnoremap wq :<C-u>:wq!<CR>

""""""""""""""""""""""""""""""
" 最後のカーソル位置を復元する
""""""""""""""""""""""""""""""
if has("autocmd")
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
endif

""""""""""""""""""""""""""""""
" 自動的に閉じ括弧を入力
""""""""""""""""""""""""""""""
imap { {}<LEFT>
imap [ []<LEFT>
imap ( ()<LEFT>

""""""""""""""""""""""""""""""
" 行頭から前行の行末への移動
""""""""""""""""""""""""""""""
set whichwrap=b,s,h,l,<,>,[,]

"--------------------------
" NeoCompleteの設定。
" Disable AutoComplPop.
"-----------------------ss---
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
    \ }
" neocomplcache
let g:neocomplcache_max_list = 30
let g:neocomplcache_enable_auto_select = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
" inoremap <expr><C-g> neocomplcache#undo_completion()
" inoremap <expr><C-l> neocomplcache#complete_common_string()
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" inoremap <expr><C-h> neocomplcache#smart_close_popup() . "\<C-h>"
" inoremap <expr><BS> neocomplcache#smart_close_popup() . "\<C-h>"
" inoremap <expr><C-y> neocomplcache#close_popup()

nnoremap <silent><C-t> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"タグジャンプ
" TODO http://qiita.com/soramugi/items/f918020c2b3f48c93bf3
" http://qiita.com/tutu/items/fbc4023ebc3004964e86
" nnoremap <C-h> :vsp<CR> :exe("tjump ".expand('<cword>'))<CR>
" nnoremap <C-k> :split<CR> :exe("tjump ".expand('<cword>'))<CR>


" unite
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
" 履歴
nnoremap <silent> uy :<C-u>Unite history/yank<CR>
nnoremap <silent> ub :<C-u>Unite buffer<CR>
nnoremap <silent> uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> ur :<C-u>Unite -buffer-name=register register<CR>
" unite起動
nnoremap <silent> ua :<C-u>Unite file_mru buffer<CR>

" Rails
" Rails間を高速移動
autocmd User Rails.view*                 NeoSnippetSource ~/.vim/snippet/ruby.rails.view.snip
autocmd User Rails.controller*           NeoSnippetSource ~/.vim/snippet/ruby.rails.controller.snip
autocmd User Rails/db/migrate/*          NeoSnippetSource ~/.vim/snippet/ruby.rails.migrate.snip
autocmd User Rails/config/routes.rb      NeoSnippetSource ~/.vim/snippet/ruby.rails.route.snip



"------------------------------------
" vimrc自動再読み込み
"-----------------------------------
" autocmd  sourc $MYGVIMRC
" Set augroup.
augroup source-vimrc
  autocmd!
  autocmd BufWritePost *vimrc source $MYVIMRC | set foldmethod=marker
  autocmd BufWritePost *gvimrc if has('gui_running') source $MYGVIMRC
augroup END

"augroup END
"------------------------------------
" タブ設定
"-----------------------------------
map <Shift><Space> :table>

"------------------------------------
" rsenc
"-----------------------------------
" NeoBundle 'NigoroJr/rsense'
" NeoBundleLazy 'supermomonga/neocomplete-rsense.vim', {
"     \ 'autoload' : { 'insert' : 1, 'filetype' : 'ruby', } }
"
" " 補完の設定
" if !exists('g:neocomplete#force_omni_input_patterns')
"   let g:neocomplete#force_omni_input_patterns = {}
" endif
" let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'
"
" let g:rsenseUseOmniFunc = 1
"
"



"------------------------------------
" python
"-----------------------------------
" autopep
" original http://stackoverflow.com/questions/12374200/using-uncrustify-with-vim/15513829#15513829
function! Preserve(command)
    " Save the last search.
    let search = @/
    " Save the current cursor position.
    let cursor_position = getpos('.')
    " Save the current window position.
    normal! H
    let window_position = getpos('.')
    call setpos('.', cursor_position)
    " Execute the command.
    execute a:command
    " Restore the last search.
    let @/ = search
    " Restore the previous window position.
    call setpos('.', window_position)
    normal! zt
    " Restore the previous cursor position.
    call setpos('.', cursor_position)
endfunction

function! Autopep8()
    "--ignote=E501: 一行の長さの補正を無視"
    call Preserve(':silent %!autopep8 --ignore=E501 -')
endfunction

" " 保存時自動実行
" autocmd BufWrite *.{py} :call Autopep8()
"
" " 外部コマンドで現在のファイルを実行する
" autocmd BufNewFile,BufRead,BufEnter *.py nnoremap <C-e> :!python %
"
"
" riot.js
au BufNewFile,BufRead *.tag setlocal ft=html
